path: js-questions
order: 3
template: case-study
hero_image: /images/backgrounds/bg-plant-2.jpg
title: Micro-tutoring platform
tags:
  - React
  - Nodejs
  - Heroku
subtitle: A platform for JavaScript developers to ask and answer questions for rewards
preview_image: /images/js-questions/preview.gif
tech_stack: React, React-Spring, Nodejs
archived: true
content:
  - |
    ## Introduction
    JS Questions is a micro-tutoring platform created by a team of five developers with the goal of providing live help to developers of all skill levels when they get stuck on a coding challenge or a concept.

    <a href="https://github.com/js-questions" class="button">View code</a>
  - image: /images/js-questions/preview-screenshots.png
    classes: w-100 mb-5

  - |
    ## Planning and Research
    During the planning phase, we created an information architecture to map out the user flow. We also created wireframes using Sketch and added high-fidelity vector graphics to create a prototype in Figma, which was used for user testing. Based on the feedback received during testing, we made changes to the UX design to emphasize both asking and answering questions.

    We also created a data model for our relational database, focusing on simplicity and clarity. We then created endpoints for the front-end and back-end using apiary, allowing us to work independently until integration was stable enough to implement.

  - image: /images/js-questions/datamodel.png
    classes: w-50 border my-5

  - |
    ## Implementation
    During the implementation phase, we had daily stand-up meetings to discuss the progress and assign tasks from an organized to-do list on Trello. In the back-end development, we used Node and Koa to create a server that utilized Socket.io and RESTful API for communication with the front-end. JSON web tokens were used for the security layer, and Sequelize was used for the database design with a PostGreSQL database.

    For the front-end development, we used React, Redux, SASS, and React Spring. We also used local and session storage for persistent data and added a security layer. We containerized the back-end and front-end separately using Docker and added a seed file of mock data to pre-populate the database for testing.

  - image: /images/js-questions/endpoints.png
    classes: w-50 border my-5

  - |
    ## Go-live
    As a team, we worked in an organized fashion and completed our MVP goal in less than two weeks. The JS Questions micro-tutoring platform now provides live help to developers of all skill levels, emphasizing both asking and answering questions, and utilizes a simple and clear data model with a relational database design.

    We used the free tier of Heroku to host the dockerized version of the app. It was fun while it lasted, but unfortunately Herkou has put an end to [free tiers](https://help.heroku.com/RSBRUH58/removal-of-heroku-free-product-plans-faq)
